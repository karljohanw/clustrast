#!/usr/bin/env python3
import pysam, os

def parse_tsv_file(tsv_file, fx_out_1, fx_out_2, output):
    cl_prev = -1
    fx_1, fx_2 = [], []
    for line in tsv_file:
        cluster, member = line.rstrip('\n').split(maxsplit=1)
        if cluster != cl_prev and cl_prev != -1:
            os.makedirs('{}/{}'.format(output, cl_prev), exist_ok=True)
            with open('{}/{}/1.fq'.format(output, cl_prev), 'w') as fq_file:
                for left in fx_1:
                    print(left, file=fq_file)
            with open('{}/{}/2.fq'.format(output, cl_prev), 'w') as fq_file:
                for right in fx_2:
                    print(right, file=fq_file)
            os.makedirs('{}/{}'.format(output, cluster), exist_ok=True)
            with open('{}/{}/done.txt'.format(output, cl_prev), 'w') as fq_file:
                pass
            fx_1, fx_2 = [], []
        memh = hash(member)
        fx_1.append(fx_out_1[memh])
        fx_2.append(fx_out_2[memh])
        cl_prev = cluster
    if fx_1:
        os.makedirs('{}/{}'.format(output, cl_prev), exist_ok=True)
        with open('{}/{}/1.fq'.format(output, cl_prev), 'w') as fq_file:
            for left in fx_1:
                print(left, file=fq_file)
        with open('{}/{}/2.fq'.format(output, cl_prev), 'w') as fq_file:
            for right in fx_2:
                print(right, file=fq_file)
        with open('{}/{}/done.txt'.format(output, cl_prev), 'w') as fq_file:
            pass
    os._exit(0)

def parse_fastxs(cluster_dict, fx_1, fx_2):
    fx_out_1, fx_out_2 = {},{}
    for r_1 in fx_1:
        r_2 = next(fx_2)
        hname_1 = r_1.name
        hname_2 = r_2.name
        if hname_1!=hname_2:
            hname_1 = hname_1[:-2]
            hname_2 = hname_2[:-2]
        h_1 = hash(hname_1)
        h_2 = hash(hname_2)
        fx_out_1[h_1] = r_1
        fx_out_2[h_2] = r_2
    return fx_out_1, fx_out_2

def main():
    import argparse
    from argparse import ArgumentParser

    parser = ArgumentParser("A program to cluster a set of short PE reads given a clustering file.")
    parser.add_argument('cluster_file', help="The file describing the clusters")
    parser.add_argument('left_file', help="The left FASTX file")
    parser.add_argument('right_file', help="The right FASTX file")
    parser.add_argument('-o',"--output", help="Name of the output directory", default='cluster')

    cluster_dict = {}
    fx_out_1, fx_out_2 = {}, {}
    args = parser.parse_args()
    os.makedirs(args.output, exist_ok=True)
    with pysam.FastxFile(args.left_file) as fx_1:
        with pysam.FastxFile(args.right_file) as fx_2:
            fx_out_1, fx_out_2 = parse_fastxs(cluster_dict, fx_1, fx_2)
    with open(args.cluster_file, 'r') as cluster_file:
        parse_tsv_file(cluster_file, fx_out_1, fx_out_2, args.output)

if __name__ == "__main__":
    main()
